#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul 10 15:58:34 2023
@author: sreekrishnaravishankar
"""
from CoolProp.CoolProp import PropsSI as cp
import numpy as np
import math
import matplotlib.pyplot as plt
import scienceplots

P_lower = 117e5
P_upper = 120e5
data_samples = 100
T_lower = 91
T_upper = 91
Enthalpy_Matrix = np.zeros((data_samples, data_samples))
Rho_Matrix = np.zeros((data_samples, data_samples))
e1 = np.zeros((data_samples, data_samples))
e2 = np.zeros((data_samples, data_samples))
Errorfunction = np.zeros((data_samples, data_samples))
Solver_table = np.zeros((data_samples**2,7))
k=0
P_tank = 120e5
T_tank = 91
H_tank = cp('Hmass', 'P', P_tank, 'T', T_tank, 'Oxygen')
mdot = 33.68
d = 10e-2
A = math.pi * (d ** 2) / 4
G = mdot/A


P_Matrix = np.linspace(P_lower, P_upper, data_samples)
T_Matrix = np.linspace(T_lower, T_upper, data_samples)

for i in range(len(P_Matrix)):
    for j in range((len(T_Matrix))):
        Enthalpy_Matrix[i,j] = cp('Hmass', 'P', P_Matrix[i], 'T', T_Matrix[j], 'Oxygen')
        Rho_Matrix[i,j] = cp('D', 'P', P_Matrix[i], 'T', T_Matrix[j], 'Oxygen')
        e1[i][j] = 100*abs((H_tank-Enthalpy_Matrix[i][j]-(((G/Rho_Matrix[i][j])**2)/2))/H_tank)
        e2[i][j] = 100*abs((P_tank-P_Matrix[i]-((G**2)/Rho_Matrix[i][j]))/P_tank)
        Errorfunction[i][j] = (e1[i][j]+e2[i][j])
        Solver_table[k] = [P_Matrix[i], T_Matrix[j], Rho_Matrix[i][j], Enthalpy_Matrix[i][j],e1[i][j],e2[i][j],Errorfunction[i][j]]  # Assign values to Therm_Table
        k += 1


P_column = Solver_table[:, 0]
T_column = Solver_table[:, 1]
Rho_column = Solver_table[:,2]
Enthalphy_column = Solver_table[:,3]
e1_column = Solver_table[:,4]
e2_column = Solver_table[:,5]
e3_column = Solver_table[:,6]
index_total_error = np.argmin(e3_column)
P_leasterror = P_column[index_total_error]
T_least_error = T_column[index_total_error]
rho_least_error = cp('D', 'P', P_leasterror, 'T', T_least_error, 'Oxygen')
Vel_least_error = G/rho_least_error
index_e1 = np.argmin(e1_column)
P_least_error_energy = P_column[index_e1]
T_least_error_energy = T_column[index_e1]
rho_least_error_energy = cp('D', 'P', P_least_error_energy, 'T', T_least_error_energy, 'Oxygen')
index_e2 = np.argmin(e2_column)
P_least_error_HEAD = P_column[index_e2]
T_least_error_Head = T_column[index_e2]
rho_least_error_head = cp('D', 'P', P_least_error_HEAD, 'T', T_least_error_Head, 'Oxygen')
Error = e3_column[index_total_error]
plt.style.use(['science','ieee'])
plt.rcParams['figure.figsize'] = [6, 4]
plt.plot(e3_column, label='F(h,rho,P)',color='red')
plt.plot(e1_column, label='f(h,rho)',color='blue',linestyle='dotted')
plt.plot(e2_column, label='g(P,rho)',color='magenta')

plt.xlabel('Horizon of guess values')
plt.ylabel('Error Percentage F(h,rho,P)')
plt.legend()
plt.title('F(h,rho,P) vs Horizon of Pressure and Temperature')

print(f'{P_leasterror} is Static Pressure and {T_least_error} is Static Temperature and Error in percentage is {Error}')
print(Vel_least_error)
